[tool.poetry]
name = "ssb-altinn-python"
version = "0.3.5"
description = "SSB Altinn Python"
authors = ["Øyvind Bruer-Skarsbø <obr@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/skars82/ssb-altinn-python"
repository = "https://github.com/skars82/ssb-altinn-python"
documentation = "https://ssb-altinn-python.readthedocs.io"
packages = [
    { include = "altinn", from = "src" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
]

[tool.poetry.urls]
Changelog = "https://github.com/skars82/ssb-altinn-python/releases"

[tool.poetry.dependencies]
python = "^3.10"
pytest = "^7.2.2"
dapla-toolbelt = "^1.6.2"
defusedxml = "^0.7.1"
pandas-stubs = "^2.0.0.230412"
xmltodict = "^0.13.0"
types-xmltodict = "^0.13.0.3"

[tool.poetry.dev-dependencies]
Pygments = ">=2.10.0"
black = ">=21.10b0"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
flake8-bandit = ">=2.1.2"
flake8-bugbear = ">=21.9.2"
flake8-docstrings = ">=1.6.0"
flake8-rst-docstrings = ">=0.2.5"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=0.930"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pyupgrade = ">=2.29.1"
safety = ">=2.2.1"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
myst-parser = {version = ">=0.16.1"}

[tool.poetry.scripts]
ssb-altinn-python = "altinn.__main__:main"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.14"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["altinn", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py39"  # Minimum Python version supported

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
select = [
    "A",       # prevent using keywords that clobber python builtins
    "ANN",     # check type annotations
    "B",       # bugbear: security warnings
    "D",       # documentation
    "E",       # pycodestyle
    "F",       # pyflakes
    "ISC",     # implicit string concatenation
    "I",       # sort imports
    "UP",      # alert you when better syntax is available in your python version
    "RUF",     # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

[tool.ruff.isort]
force-single-line = true

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
